module.exports=function(e){var r={};function t(s){if(r[s])return r[s].exports;var o=r[s]={i:s,l:!1,exports:{}};return e[s].call(o.exports,o,o.exports,t),o.l=!0,o.exports}return t.m=e,t.c=r,t.d=function(e,r,s){t.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:s})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,r){if(1&r&&(e=t(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(t.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var o in e)t.d(s,o,function(r){return e[r]}.bind(null,o));return s},t.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(r,"a",r),r},t.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},t.p="/dist/",t(t.s=12)}([function(e,r){e.exports=require("express")},function(e,r){e.exports=require("mongoose")},function(e,r){e.exports=require("body-parser")},function(e,r){e.exports=require("path")},function(e,r){e.exports=require("cookie-parser")},function(e,r){e.exports=require("compression")},function(e,r){e.exports=require("cors")},function(e,r){e.exports=require("helmet")},function(e,r){e.exports=require("crypto")},function(e,r){e.exports=require("lodash/extend")},function(e,r){e.exports=require("jsonwebtoken")},function(e,r){e.exports=require("express-jwt")},function(e,r,t){e.exports=t(13)},function(e,r,t){"use strict";t.r(r);var s={env:"production",port:process.env.PORT||3e3,jwtSecret:process.env.JWT_SECRET||"YOUR_secret_key",mongoUri:process.env.MONGODB_URI||process.env.MONGO_HOST||"mongodb://"+(process.env.IP||"localhost")+":"+(process.env.MONGO_PORT||"27017")+"/mernproject"},o=t(0),n=t.n(o),a=t(3),i=t.n(a),u=t(2),d=t.n(u),c=t(4),l=t.n(c),p=t(5),f=t.n(p),h=t(6),m=t.n(h),g=t(7),w=t.n(g),y=t(1),v=t.n(y),j=t(8),x=t.n(j);const _=new v.a.Schema({name:{type:String,trim:!0,required:"Name is required"},email:{type:String,trim:!0,unique:"Email already exists",match:[/.+\@.+\..+/,"Please fill a valid email address"],required:"Email is required"},hashed_password:{type:String,required:"Password is required"},salt:String,updated:Date,created:{type:Date,default:Date.now}});_.virtual("password").set((function(e){this._password=e,this.salt=this.makeSalt(),this.hashed_password=this.encryptPassword(e)})).get((function(){return this._password})),_.path("hashed_password").validate((function(e){this._password&&this._password.length<6&&this.invalidate("password","Password must be at least 6 characters."),this.isNew&&!this._password&&this.invalidate("password","Password is required")}),null),_.methods={authenticate:function(e){return this.encryptPassword(e)===this.hashed_password},encryptPassword:function(e){if(!e)return"";try{return x.a.createHmac("sha1",this.salt).update(e).digest("hex")}catch(e){return""}},makeSalt:function(){return Math.round((new Date).valueOf()*Math.random())+""}};var b=v.a.model("User",_),q=t(9),S=t.n(q);var O=e=>{let r="";if(e.code)switch(e.code){case 11e3:case 11001:r=(e=>{let r;try{let t=e.message.substring(e.message.lastIndexOf(".$")+2,e.message.lastIndexOf("_1"));r=t.charAt(0).toUpperCase()+t.slice(1)+" already exists"}catch(e){r="Unique field already exists"}return r})(e);break;default:r="Something went wrong"}else for(let t in e.errors)e.errors[t].message&&(r=e.errors[t].message);return r};var P=async(e,r)=>{const t=new b(e.body);try{return await t.save(),r.status(200).json({message:"Successfully signed up!"})}catch(e){return r.status(400).json({error:O(e)})}},U=async(e,r,t,s)=>{try{let o=await b.findById(s);if(!o)return r.status("400").json({error:"User not found"});e.profile=o,t()}catch(e){return r.status("400").json({error:"Could not retrieve user"})}},k=(e,r)=>(e.profile.hashed_password=void 0,e.profile.salt=void 0,r.json(e.profile)),M=async(e,r)=>{try{let e=await b.find().select("name email updated created");r.json(e)}catch(e){return r.status(400).json({error:O(e)})}},I=async(e,r)=>{try{let t=e.profile,s=await t.remove();s.hashed_password=void 0,s.salt=void 0,r.json(s)}catch(e){return r.status(400).json({error:O(e)})}},T=async(e,r)=>{try{let t=e.profile;t=S()(t,e.body),t.updated=Date.now(),await t.save(),t.hashed_password=void 0,t.salt=void 0,r.json(t)}catch(e){return r.status(400).json({error:O(e)})}},D=t(10),E=t.n(D),R=t(11);var C={signin:async(e,r)=>{try{let t=await b.findOne({email:e.body.email});if(!t)return r.status("401").json({error:"User not found"});if(!t.authenticate(e.body.password))return r.status("401").send({error:"Email and password don't match."});const o=E.a.sign({_id:t._id},s.jwtSecret);return r.cookie("t",o,{expire:new Date+9999}),r.json({token:o,user:{_id:t._id,name:t.name,email:t.email}})}catch(e){return r.status("401").json({error:"Could not sign in"})}},signout:(e,r)=>(r.clearCookie("t"),r.status("200").json({message:"signed out"})),requireSignin:t.n(R)()({secret:s.jwtSecret,userProperty:"auth"}),hasAuthorization:(e,r,t)=>{if(!(e.profile&&e.auth&&e.profile._id==e.auth._id))return r.status("403").json({error:"User is not authorized"});t()}};const N=n.a.Router();N.route("/").get((e,r)=>{r.send({status:"ok",message:"Welcome to Fumana backend"})}),N.route("/api/users").get(M).post(P),N.route("/api/users/:userId").get(C.requireSignin,k).put(C.requireSignin,C.hasAuthorization,T).delete(C.requireSignin,C.hasAuthorization,I),N.param("userId",U);var z=N;const A=n.a.Router();A.route("/auth/signin").post(C.signin),A.route("/auth/signout").get(C.signout);var G=A;const B=process.cwd(),H=n()();H.use(d.a.json()),H.use(d.a.urlencoded({extended:!0})),H.use(l()()),H.use(f()()),H.use(w()()),H.use(m()()),H.use("/dist",n.a.static(i.a.join(B,"dist"))),H.use("/",z),H.use("/",G),H.use((e,r,t,s)=>{"UnauthorizedError"===e.name?t.status(401).json({error:e.name+": "+e.message}):e&&(t.status(400).json({error:e.name+": "+e.message}),console.log(e))});var W=H;v.a.Promise=global.Promise,v.a.connect(s.mongoUri,{useNewUrlParser:!0,useCreateIndex:!0,useUnifiedTopology:!0}),v.a.connection.on("error",()=>{throw new Error("unable to connect to database: "+s.mongoUri)}),W.listen(s.port,e=>{e&&console.log(e),console.info("Server started on port %s.",s.port)})}]);